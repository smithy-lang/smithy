# -*- coding: utf-8 -*-
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import smithy
from smithy.lexer import SmithyLexer

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinx_tabs.tabs', 'smithy']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Smithy'
copyright = u'2022, Amazon Web Services'
author = u'Amazon Web Services'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# Disable smart quotes
smartquotes = False

# Warn on broken links and references.
nitpicky = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'smithy'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
html_theme_path = ['../themes']

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []

# Custom sidebar templates, maps document names to template names.
html_sidebars = {
    '**': ['globaltoc.html']
}

html_favicon = "../themes/smithy/static/favicon.png"


# Load the version number from ../VERSION
def __load_version():
    with open('../../VERSION', 'r') as file:
        return file.read().replace('\n', '')

# We use the __smithy_version__ placeholder in documentation to represent
# the current Smithy library version number. This is found and replaced
# using a source-read pre-processor so that the generated documentation
# always references the current VERSION.
smithy_version = __load_version()
smithy_version_placeholder = "__smithy_version__"


def setup(sphinx):
    sphinx.add_lexer("smithy", SmithyLexer)
    sphinx.connect('source-read', source_read_handler)
    print("Finding and replacing '" + smithy_version_placeholder + "' with '" + smithy_version + "'")

# Rewrites __smithy_version__ to the version found in ../VERSION
def source_read_handler(app, docname, source):
    source[0] = source[0].replace(smithy_version_placeholder, smithy_version)
