----------------------
Type refinement traits
----------------------

Type refinement traits are traits that significantly refine, or change,
the type of a shape.

.. contents:: Table of contents
    :depth: 1
    :local:
    :backlinks: none


.. smithy-trait:: smithy.api#default

.. _default-trait:

``default`` trait
=================

Summary
    Provides a structure member with a default zero value.
Trait selector
    ``structure > member :test(> :is(simpleType, collection, map))``

    A member of a structure that targets a simple type, list, set, or map.
Value type
    Annotation trait.
Conflicts with
    * :ref:`required-trait`

The default trait can be applied to structure members to indicate that the targeted
shape has a default, zero value.

The following example defines a structure with a ``@default`` "title" member that
has a default zero value:

.. code-block:: smithy

    structure Message {
        @default
        title: String // defaults to ""
    }

.. seealso::

   * :ref:`structure-nullability`
   * :ref:`required-trait`
   * :ref:`clientOptional-trait`
   * :ref:`input-trait`


.. _default-values:

Default zero values
-------------------

The following table describes the default zero value of each kind of shape.
Programming languages and code generators that cannot initialize structure
members with the following default values SHOULD represent those members as
nullable as this is semantically equivalent to the default zero value.

.. list-table::
    :header-rows: 1
    :widths: 10 10 80

    * - Shape Type
      - Zero Value
      - Description
    * - boolean
      - ``false``
      - Boolean false.
    * - numbers
      - ``0``
      - Numeric zero.
    * - intEnum
      - ``0``
      - Numeric zero.
    * - string
      - empty string
      -
    * - enum
      - empty string
      -
    * - blob
      - empty blob
      - This includes blob shapes marked with the :ref:`streaming-trait`.
    * - timestamp
      - Unix epoch
      - Zero seconds since the epoch (for example, ``0`` or
        ``1970-01-01T00:00:00Z``).
    * - document
      - ``null``
      - A null document value.
    * - list
      - empty list
      -
    * - set
      - empty set
      -
    * - map
      - empty map
      -
    * - structure
      - N/A
      - Structures have no default value.
    * - union
      - N/A
      - Unions have no default value. A union MUST be set to one of its
        variants for it to be valid, and unions have no default variant.


Constraint validation
---------------------

Constraint traits are not evaluated on structure members marked with the
default trait when the value of the member is the default value.


Guidance on protocol design
---------------------------

Protocols MAY choose if and how the default trait impacts serialization and
deserialization. However, protocol designers should consider the following
best-practices:

1. Serializing the default zero value of a member marked with the default
   trait can lead to unintended information disclosure. For example, consider
   a newly introduced structure member marked with the default trait that is
   only exposed to customers of a service that are allowlisted into a private
   beta. Serializing the zero values of these members could expose the feature
   to customers that are not part of the private beta because they would see
   the member serialized in messages they receive from the service.
2. Protocol deserialization implementations SHOULD tolerate receiving a
   serialized default zero value. This also accounts for older clients that
   think a structure member is required, but the service has since transitioned
   the member to use the default trait.
3. Client implementations SHOULD tolerate structure members marked as
   :ref:`required <required-trait>` that have no serialized value. For example,
   if a service migrates a member from required to default, then older clients
   SHOULD gracefully handle the zero value of the member being omitted on the
   wire. In this case, rather than failing, a client SHOULD set the member
   value to its default zero value. Failing to deserialize the structure is a
   bad outcome because what the service perceived as a backward compatible
   change (i.e., replacing the :ref:`required-trait` with the default trait)
   could break previously generated clients.


.. smithy-trait:: smithy.api#clientOptional
.. _clientOptional-trait:

``clientOptional`` trait
========================

Summary
    Requires that non-authoritative generators like clients treat a structure
    member as nullable regardless of if the member is also marked with the
    :ref:`required-trait`.
Trait selector
    structure > member
Value type
    Annotation trait

What is required today might not be required tomorrow. For cases when a service
isn't sure if a member will be required forever, they can mark a ``@required``
member as ``@clientOptional`` to ensure that non-authoritative consumers of the
model treat the member as optional (for example, clients MUST treat such members
as optional while servers could treat them as always present because they have
perfect knowledge of their own model). The ``@required`` trait can be backward
compatibly removed from a member marked as ``@clientOptional`` (and does not
need to be replaced with the ``@default`` trait). This causes the ``@required``
trait to function as server-side validation rather than something that changes
generated code.

For example, the ``@required`` trait on ``foo`` in the following structure is
considered a validation constraint rather than a type refinement trait:

.. code-block:: smithy

    structure Foo {
        @required
        @clientOptional
        foo: String
    }

.. note::

    Structure members in Smithy are automatically considered nullable. For example,
    the following structure:

    .. code-block:: smithy

        structure Foo {
            baz: String
        }

    Is equivalent to the following structure:

    .. code-block:: smithy

        structure Foo {
            @clientOptional
            baz: String
        }

.. seealso::

   * :ref:`structure-nullability`
   * :ref:`required-trait`
   * :ref:`default-trait`
   * :ref:`input-trait`


.. smithy-trait:: smithy.api#error
.. _error-trait:

``error`` trait
===============

Summary
    Indicates that a structure shape represents an error. All shapes
    referenced by the :ref:`errors list of an operation <operation>`
    MUST be targeted with this trait.
Trait selector
    ``structure``
Value type
    ``string`` that MUST be set to "client" or "server" to indicate if the
    client or server is at fault for the error.
Conflicts with
    :ref:`trait <trait-shapes>`

The following structure defines a throttling error.

.. tabs::

    .. code-tab:: smithy

        @error("client")
        structure ThrottlingError {}

Note that this structure is lacking the ``retryable`` trait that generically
lets clients know that the error is retryable.

.. tabs::

    .. code-tab:: smithy

        @error("client")
        @retryable
        structure ThrottlingError {}

When using an HTTP-based protocol, it is recommended to add an
:ref:`httpError-trait` to use an appropriate HTTP status code with
the error.

.. tabs::

    .. code-tab:: smithy

        @error("client")
        @retryable
        @httpError(429)
        structure ThrottlingError {}

The ``message`` member of an error structure is special-cased. It contains
the human-readable message that describes the error. If the ``message`` member
is not defined in the structure, code generated for the error may not provide
an idiomatic way to access the error message (e.g., an exception message
in Java).

.. tabs::

    .. code-tab:: smithy

        @error("client")
        @retryable
        @httpError(429)
        structure ThrottlingError {
            @required
            message: String
        }


.. smithy-trait:: smithy.api#input
.. _input-trait:

``input`` trait
===============

Summary
    Specializes a structure for use only as the input of a single operation,
    providing relaxed backward compatibility requirements for structure
    members.
Trait selector
    ``structure``
Value type
    Annotation trait.
Conflicts with
    * :ref:`output-trait`
    * :ref:`error-trait`

Structure shapes marked with the ``@input`` trait MUST adhere to the
following constraints:

1. They can only be referenced in the model as an operation's input.
2. They cannot be used as the input of more than one operation.
3. They SHOULD have a shape name that starts with the name of the
   operation that targets it (if any). For example, the input shape of the
   ``GetSprocket`` operation SHOULD be named ``GetSprocketInput``,
   ``GetSprocketRequest``, or something similar.

These constraints allow tooling to specialize operation input shapes in
ways that would otherwise require complex model transformations.

.. rubric:: Impact on backward compatibility

Required members of a structure marked with the ``@input`` trait are implicitly
considered :ref:`clientOptional <clientOptional-trait>`. It is backward
compatible to remove the ``@required`` trait from top-level members of
structures marked with the ``@input`` trait, and the ``@required`` trait does
not need to be replaced with the ``@default`` trait (though this is allowed
as well). This gives service teams the ability to remove the ``@required``
trait from top-level input members and loosen requirements without risking
breaking previously generated clients.

.. seealso:: :ref:`structure-nullability`


.. smithy-trait:: smithy.api#output
.. _output-trait:

``output`` trait
================

Summary
    Specializes a structure for use only as the output of a single operation.
Trait selector
    ``structure``
Value type
    Annotation trait.
Conflicts with
    :ref:`input-trait`, :ref:`error-trait`

Structure shapes marked with the ``@output`` trait MUST adhere to the
following constraints:

1. They can only be referenced in the model as an operation's output.
2. They cannot be used as the output of more than one operation.
3. They SHOULD have a shape name that starts with the name of the
   operation that targets it (if any). For example, the output shape of the
   ``GetSprocket`` operation SHOULD be named ``GetSprocketOutput``.

These constraints allow tooling to specialize operation output shapes in
ways that would otherwise require complex model transformations.


.. smithy-trait:: smithy.api#sparse
.. _sparse-trait:

``sparse`` trait
================

Summary
    Indicates that lists and maps MAY contain ``null`` values. The ``sparse``
    trait has no effect on map keys; map keys are never allowed to be ``null``.
Trait selector
    ``:is(list, map)``
Value type
    Annotation trait.

The following example defines a :ref:`list <list>` shape that MAY contain
``null`` values:

.. tabs::

    .. code-tab:: smithy

        @sparse
        list SparseList {
            member: String
        }

    .. code-tab:: json

        {
            "smithy": "1.0",
            "shapes": {
                "smithy.example#SparseList": {
                    "type": "list",
                    "member": {
                        "target": "smithy.api#String",
                    },
                    "traits": {
                        "smithy.api#sparse": {}
                    }
                }
            }
        }

The following example defines a :ref:`map <map>` shape that MAY contain
``null`` values:

.. tabs::

    .. code-tab:: smithy

        @sparse
        map SparseMap {
            key: String
            value: String
        }

    .. code-tab:: json

        {
            "smithy": "1.0",
            "shapes": {
                "smithy.example#SparseMap": {
                    "type": "map",
                    "key": {
                        "target": "smithy.api#String"
                    },
                    "value": {
                        "target": "smithy.api#String"
                    },
                    "traits": {
                        "smithy.api#sparse": {}
                    }
                }
            }
        }

.. _mixin-trait:

``mixin`` trait
===============

Summary
    Indicates that the targeted shape is a mixin.
Trait selector
    ``:not(member)``
Value type
    ``structure``

The mixin trait is a structure that contains the following members:

.. list-table::
    :header-rows: 1
    :widths: 10 10 80

    * - Property
      - Type
      - Description
    * - ``localTraits``
      - [:ref:`shape-id`]
      - A list of shape IDs which MUST reference valid traits that are applied
        directly to the mixin. The traits in the list are not copied onto
        shapes that use the mixin. This only affects traits applied to the
        mixin container shape and has no impact on the members contained within
        a mixin.

        .. note::

            The ``mixin`` trait is considered implicitly present in this
            property and does not need to be explicitly added.

.. code-block:: smithy

    @mixin
    structure BaseUser {
        id: String
    }

    structure UserDetails with [BaseUser] {
        alias: String
        email: String
    }

.. seealso::

    The :ref:`Smithy spec <mixins>` for details on how mixins work.

.. _Option type: https://doc.rust-lang.org/std/option/enum.Option.html
